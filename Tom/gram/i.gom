module gram.i
imports int String
abstract syntax

Instrucao = Atribuicao(Id:String,op:OpAtribuicao,Expressao:Expressao)
	| Declaracao(DefTipo:DefTipo,Declaracoes:Declaracoes)
	| If(Condicao:Expressao,Instrucao1:Instrucao,Instrucao2:Instrucao)
	| While(Condicao:Expressao,Instrucao:Instrucao)
	| For(Declaracao:Instrucao,Condicao:Expressao,Expressao:Expressao,Instrucao:Instrucao)
	| Return(Expressao:Expressao)
	| Funcao(DefTipo:DefTipo,Nome:String,Argumentos:Argumentos,Instrucao:Instrucao)
	| Exp(Expressao:Expressao)
	| SeqInstrucao(Instrucao*)

Expressao = ExpNum(Exp1:Expressao,op:OpNum,Exp2:Expressao)
	| Id(Id:String)
	| Pos(Expressao:Expressao)
	| Neg(Expressao:Expressao)
	| Nao(Expressao:Expressao)
	| Call(Id:String,Parametros:Parametros)
	| IncAntes(OpInc:OpInc,Id:String)
	| IncDepois(OpInc:OpInc,Id:String)
	| Condicional(Condicao:Expressao,Exp1:Expressao,Exp2:Expressao)
	| Int(Int:int) | Char(Char:String) | True() | False() | Float(num:int)
	| Ou(Cond1:Expressao,Cond2:Expressao)
	| E(Cond1:Expressao,Cond2:Expressao)
	| Comp(Exp1:Expressao,OpComp:OpComp,Exp2:Expressao)
	| Input(Tipo:DefTipo)
	| Print(Expressao:Expressao)
	| Expressoes(Expressao*)
	| Empty()

DefTipo = DInt() | DChar() | DBoolean() | DFloat() | DVoid()

Argumentos = ListaArgumentos(Argumentos*)
	| Argumento(DefTipo:DefTipo,Id:String)

Parametros = ListaParametros(Parametros*)
	| Parametro(Expressao:Expressao)

Declaracoes = ListaDecl(Declaracoes*)
	| Decl(Id:String,Expressao:Expressao)

OpAtribuicao =  Atrib() | Mult() | Div() | Soma() | Sub()

OpNum = Mais() | Vezes() | Divide() | Menos() | Mod()

OpComp = Maior() | Menor() | MaiorQ() | MenorQ() | Dif() | Igual()

OpInc = Inc() | Dec()



IntWrapper = IntWrap(Value:int)
